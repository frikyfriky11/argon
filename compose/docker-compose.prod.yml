services:
  db:
    image: "postgres:15.3-alpine"
    environment:
      POSTGRES_PASSWORD: "Passw0rd!"
      POSTGRES_DB: "ArgonDb"
    restart: unless-stopped
    volumes:
      - type: volume
        source: db
        target: /var/lib/postgresql/data
        volume:
          nocopy: true
    networks:
      - "data"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  webapi:
    image: "${REGISTRY}/frikyfriky11/argon-webapi:latest"
    environment:
      Cors__Origins__0: "https://${PUBLIC_HOST_PROD}"
      ConnectionStrings__DefaultConnection: "Server=db;Database=ArgonDb;User Id=postgres;Password=Passw0rd!;"
      Auth__Authority: "${AUTH_AUTHORITY_PROD}"
      Auth__ClientId: "${AUTH_CLIENT_ID_PROD}"
    restart: unless-stopped
    networks:
      - "traefik"
      - "data"
    labels:
      traefik.enable: "true"
      traefik.http.routers.argon-webapi.rule: "Host(`${PUBLIC_HOST_PROD}`) && PathPrefix(`/api/`)"
      traefik.http.routers.argon-webapi.tls.certresolver: "sslresolver"
      traefik.http.routers.argon-webapi.middlewares: "argon-webapi-stripprefix"
      traefik.http.middlewares.argon-webapi-stripprefix.stripprefix.prefixes: "/api/"
      traefik.http.services.argon-webapi.loadbalancer.server.port: "80"
      traefik.docker.network: "traefik_traefik"
    depends_on:
      db:
        condition: service_healthy

  webgui:
    image: "${REGISTRY}/frikyfriky11/argon-webgui:latest"
    restart: unless-stopped
    networks:
      - "traefik"
    labels:
      traefik.enable: "true"
      traefik.http.routers.argon-webgui.rule: "Host(`${PUBLIC_HOST_PROD}`)"
      traefik.http.routers.argon-webgui.tls.certresolver: "sslresolver"
      traefik.http.services.argon-webgui.loadbalancer.server.port: "80"
      traefik.docker.network: "traefik_traefik"
    depends_on:
      webapi:
        condition: service_healthy

networks:
  traefik:
    name: "traefik_traefik"
    external: true

  data:
    
${COMPOSE_VOLUMES_PROD}