name: master - Test, Build and Deploy

on:
  push:
    tags:
      - "v**"

env:
  REGISTRY: ghcr.io

jobs:
  tests:
    name: Run .NET backend tests
    runs-on: self-hosted
    
    env:
      DOTNET_INSTALL_DIR: "./.dotnet"
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          
      - name: Run tests
        run: dotnet test
        
  build-push-webapi:
    name: Build WebApi image and push to Docker registry
    runs-on: self-hosted
    needs: tests
    
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/frikyfriky11/argon-webapi
          tags: |
            type=raw,value=latest
            type=raw,value=${{ github.ref_name }}
            type=sha

      - name: Build Docker image and push to registry
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/Argon.WebApi/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-push-webgui:
    name: Build WebGui image and push to Docker registry
    runs-on: self-hosted
    needs: tests
    
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/frikyfriky11/argon-webgui
          tags: |
            type=raw,value=latest
            type=raw,value=${{ github.ref_name }}
            type=sha

      - name: Build Docker image and push to registry
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/Argon.WebGui/Dockerfile
          push: true
          build-args: |
            BACKEND_API_URI=https://${{ secrets.PUBLIC_HOST_PROD }}/api
            RUNNING_ENVIRONMENT=test
            BUILD_ID=${{ github.run_id }}
            COMMIT_HASH=${{ github.ref_name }}-${{ github.sha }}
            AUTHORITY=${{ secrets.AUTH_AUTHORITY_PROD }}
            CLIENT_ID=${{ secrets.AUTH_CLIENT_ID_PROD }}
            REDIRECT_URI=https://${{ secrets.PUBLIC_HOST_PROD }}/auth/post-sign-in
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy the app to the PROD env
    runs-on: self-hosted
    needs: [ build-push-webapi, build-push-webgui ]
    
    env:
      PUBLIC_HOST_PROD: ${{ secrets.PUBLIC_HOST_PROD }}
      AUTH_AUTHORITY_PROD: ${{ secrets.AUTH_AUTHORITY_PROD }}
      AUTH_CLIENT_ID_PROD: ${{ secrets.AUTH_CLIENT_ID_PROD }}
      COMPOSE_VOLUMES_PROD: ${{ secrets.COMPOSE_VOLUMES_PROD }}

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Substitute environment variables from docker-compose.prod.yml and rename it
      run: envsubst < compose/docker-compose.prod.yml > compose/docker-compose.yml
      
    - name: Copy docker-compose.yml to remote server via SSH
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.REMOTE_SSH_HOST }}
        username: ${{ secrets.REMOTE_SSH_USERNAME }}
        password: ${{ secrets.REMOTE_SSH_PASSWORD }}
        source: "compose/docker-compose.yml"
        target: "${{ secrets.REMOTE_SSH_FOLDER_PROD }}"
        strip_components: 1 # removes the deploy folder when copying over to destination

    - name: Up the Docker compose project on the remote server via SSH
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.REMOTE_SSH_HOST }}
        username: ${{ secrets.REMOTE_SSH_USERNAME }}
        password: ${{ secrets.REMOTE_SSH_PASSWORD }}
        script: cd ${{ secrets.REMOTE_SSH_FOLDER_PROD }} && docker compose up -d --pull always