// <auto-generated />
using System;
using Argon.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Argon.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Argon.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("boolean");

                    b.Property<Instant?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Argon.Domain.Entities.BankStatement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("ImportedToAccountId")
                        .HasColumnType("uuid");

                    b.Property<Instant?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ImportedToAccountId");

                    b.ToTable("BankStatements");
                });

            modelBuilder.Entity("Argon.Domain.Entities.BudgetItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("BudgetItems");
                });

            modelBuilder.Entity("Argon.Domain.Entities.Counterparty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Counterparties");
                });

            modelBuilder.Entity("Argon.Domain.Entities.CounterpartyIdentifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CounterpartyId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdentifierText")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Instant?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CounterpartyId");

                    b.ToTable("CounterpartyIdentifiers");
                });

            modelBuilder.Entity("Argon.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BankStatementId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CounterpartyId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Instant?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PotentialDuplicateOfTransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("RawImportData")
                        .HasColumnType("jsonb");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BankStatementId");

                    b.HasIndex("CounterpartyId");

                    b.HasIndex("PotentialDuplicateOfTransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Argon.Domain.Entities.TransactionRow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Credit")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("Debit")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Instant?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RowCounter")
                        .HasColumnType("integer");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionRows");
                });

            modelBuilder.Entity("Argon.Domain.Entities.BankStatement", b =>
                {
                    b.HasOne("Argon.Domain.Entities.Account", "ImportedToAccount")
                        .WithMany("BankStatements")
                        .HasForeignKey("ImportedToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportedToAccount");
                });

            modelBuilder.Entity("Argon.Domain.Entities.BudgetItem", b =>
                {
                    b.HasOne("Argon.Domain.Entities.Account", "Account")
                        .WithMany("BudgetItems")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Argon.Domain.Entities.CounterpartyIdentifier", b =>
                {
                    b.HasOne("Argon.Domain.Entities.Counterparty", "Counterparty")
                        .WithMany("Identifiers")
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");
                });

            modelBuilder.Entity("Argon.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Argon.Domain.Entities.BankStatement", "BankStatement")
                        .WithMany("Transactions")
                        .HasForeignKey("BankStatementId");

                    b.HasOne("Argon.Domain.Entities.Counterparty", "Counterparty")
                        .WithMany("Transactions")
                        .HasForeignKey("CounterpartyId");

                    b.HasOne("Argon.Domain.Entities.Transaction", "PotentialDuplicateOfTransaction")
                        .WithMany("DuplicateTransactions")
                        .HasForeignKey("PotentialDuplicateOfTransactionId");

                    b.Navigation("BankStatement");

                    b.Navigation("Counterparty");

                    b.Navigation("PotentialDuplicateOfTransaction");
                });

            modelBuilder.Entity("Argon.Domain.Entities.TransactionRow", b =>
                {
                    b.HasOne("Argon.Domain.Entities.Account", "Account")
                        .WithMany("TransactionRows")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Argon.Domain.Entities.Transaction", "Transaction")
                        .WithMany("TransactionRows")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Argon.Domain.Entities.Account", b =>
                {
                    b.Navigation("BankStatements");

                    b.Navigation("BudgetItems");

                    b.Navigation("TransactionRows");
                });

            modelBuilder.Entity("Argon.Domain.Entities.BankStatement", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Argon.Domain.Entities.Counterparty", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Argon.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("DuplicateTransactions");

                    b.Navigation("TransactionRows");
                });
#pragma warning restore 612, 618
        }
    }
}
